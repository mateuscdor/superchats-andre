export declare function whiteList(client: any): Promise<{
    sendText: (id: string, text: string, replyIdMessage?: string) => Promise<any>;
    sendLink: (id: string, link: string, description?: string, replyIdMessage?: string) => Promise<any>;
    sendImage: (id: string, file: string, text?: string, replyIdMessage?: string) => Promise<any>;
    sendVideo: (id: string, file: string, text?: string, replyIdMessage?: string) => Promise<any>;
    sendDocument: (id: string, file: string, filename?: string, replyIdMessage?: string) => Promise<any>;
    sendLocation: (id: string, latitude: number, logitude: number, title?: string, address?: string, replyIdMessage?: string) => Promise<any>;
    sendContact: (id: string, name: string, contact: string, replyIdMessage?: string) => Promise<any>;
    sendSticker: (id: string, file: string, replyIdMessage?: string) => Promise<any>;
    sendAudio: (id: string, file: string, replyIdMessage?: string) => Promise<any>;
    sendVoice: (id: string, file: string, replyIdMessage?: string) => Promise<any>;
    sendList: (id: string, btnName: string, section: string, rows: any, description?: string, replyIdMessage?: string) => Promise<any>;
    sendButtons: (id: string, title: string, buttons: any, description?: string, replyIdMessage?: string) => Promise<any>;
    sendTextStatus: (text: string) => Promise<any>;
    sendImageStatus: (file: string, text?: string) => Promise<any>;
    sendVideoStatus: (file: string, text?: string) => Promise<any>;
    deleteStatus: (msgId: string) => Promise<any>;
    onMessage: (message: any) => Promise<any>;
    onAck: (message: any) => Promise<any>;
    onPresence: (message: any) => Promise<any>;
    onDelete: (message: any) => Promise<any>;
    onParticipants: (message: any) => Promise<any>;
    onGroups: (message: any) => Promise<any>;
    forceStatusOn: () => Promise<any>;
    logout: () => Promise<any>;
    close: () => Promise<any>;
    getHostDevice: () => Promise<any>;
    getBatteryLevel: () => Promise<any>;
    getNumberProfile: (id: string) => Promise<any>;
    getProfileStatus: (id: string) => Promise<any>;
    getPicture: (id: string) => Promise<any>;
    setPicture: (id: string, file: string) => Promise<any>;
    archiveChat: (id: string, boolean: boolean) => Promise<any>;
    pinChat: (id: string, boolean: boolean) => Promise<any>;
    muteChat: (id: string, timer: timerMute) => Promise<any>;
    unmuteChat: (id: string) => Promise<any>;
    deleteChat: (id: string) => Promise<any>;
    blockContact: (id: string) => Promise<any>;
    unblockContact: (id: string) => Promise<any>;
    deleteMessageAll: (id: string, messageId: string) => Promise<any>;
    deleteMessageMe: (id: string, messageId: string) => Promise<any>;
    getBlockList: () => Promise<any>;
    getAllContacts: () => Promise<any>;
    getConnectionState: () => Promise<any>;
    getChats: () => Promise<any>;
    getGroups: () => Promise<any>;
    decryptFile: (message: any) => Promise<any>;
    decryptRemote: (message: any) => Promise<any>;
    decryptFileSave: (message: any, filename: string) => Promise<any>;
    decryptByIdFile: (id: string, msgId: string) => Promise<any>;
    decryptByIdFileSave: (id: string, msgId: string, filename: string) => Promise<any>;
    setPresence: (id: string, type: string) => Promise<any>;
    createGroup: (name: string, participants: any) => Promise<any>;
    addParticipantsGroup: (id: string, participants: any) => Promise<any>;
    removeParticipantsGroup: (id: string, participants: any) => Promise<any>;
    addGroupAdmins: (id: string, participants: any) => Promise<any>;
    removeGroupAdmins: (id: string, participants: any) => Promise<any>;
    groupTitle: (id: string, title: string) => Promise<any>;
    groupDescription: (id: string, description: string) => Promise<any>;
    leaveGroup: (id: string) => Promise<any>;
    getGroupLink: (id: string) => Promise<any>;
    revokeGroupLink: (id: string) => Promise<any>;
    joinGroup: (code: string) => Promise<any>;
    infoGroup: (id: string) => Promise<any>;
    setGroupSettings: (id: string, option: listSettings, boolean: boolean) => Promise<any>;
    getChatMessages: (id: string, number: number) => Promise<any>;
    getAllUnreadMessages: () => Promise<any>;
    getChatAllMessages: (id: string) => Promise<any>;
    getMessageById: (id: string, idMsg: string) => Promise<any>;
    forwardMessage: (chatId: string, msgId: string, toId: string) => Promise<any>;
    markRead: (chatId: string) => Promise<any>;
}>;
declare type timerMute = 'hour' | 'week' | 'ever';
declare type listSettings = ('message' | 'settings');
export {};
